diff --git a/console.c b/console.c
index a280d2b..10c14ac 100644
--- a/console.c
+++ b/console.c
@@ -2,6 +2,7 @@
 // Input is from the keyboard or serial port.
 // Output is written to the screen and serial port.
 
+#include "console.h"
 #include "types.h"
 #include "defs.h"
 #include "param.h"
@@ -124,12 +125,44 @@ panic(char *s)
 }
 
 //PAGEBREAK: 50
-#define BACKSPACE 0x100
-#define CRTPORT 0x3d4
 static ushort *crt = (ushort*)P2V(0xb8000);  // CGA memory
 
+struct {
+  char buf[INPUT_BUF];
+  uint r;  // Read index (first index of buf)
+  uint w;  // Write index (last index of buf)
+  uint e;  // Edit index (current index)
+  uint rightmost; // the first empty char in the line
+} input;
+
+char charsToBeMoved[INPUT_BUF];  // temporary storage for input.buf in a certain context
+
+/*
+  this struct will hold the history buffer array
+  For ex:
+  If 5 commands are stored. In this case:
+  * 11,12,13,14,15 indices are occupied in the history table with 11 as the newest.
+  * lastCommandIndex == 11
+  * currentHistory ranges from 0 to 4 (i.e the displacement)
+  * init(currentHistory) = -1
+*/
+struct {
+  char bufferArr[MAX_HISTORY][INPUT_BUF]; // holds the actual command strings -
+  uint lengthsArr[MAX_HISTORY]; // this will hold the length of each command string
+  uint lastCommandIndex;  // the index of the last command entered to history
+  int numOfCommmandsInMem; // number of history commands in mem
+  int currentHistory; // holds the current history view -> displacement from the last command index 
+} historyBufferArray;
+
+char oldBuf[INPUT_BUF]; // this will hold the details of the command that we were typing before accessing the history
+uint oldBufferLength;
+
+char buf2[INPUT_BUF];
+
+#define C(x)  ((x)-'@')  // Control-x
+
 static void
-cgaputc(int c)
+cgaputc(int c, int flag)
 {
   int pos;
 
@@ -139,12 +172,21 @@ cgaputc(int c)
   outb(CRTPORT, 15);
   pos |= inb(CRTPORT+1);
 
-  if(c == '\n')
-    pos += 80 - pos%80;
-  else if(c == BACKSPACE){
-    if(pos > 0) --pos;
-  } else
-    crt[pos++] = (c&0xff) | 0x0700;  // black on white
+  switch(c) {
+    case '\n':
+      pos += 80 - pos%80;
+      break;
+    case BACKSPACE:
+      if(pos > 0) --pos;
+      break;
+    case LEFT_ARROW:
+      if(pos > 0) --pos;
+      break;
+    case RIGHT_ARROW:
+      break;
+    default:
+      crt[pos++] = (c&0xff) | 0x0700;  // black on white
+  }
 
   if(pos < 0 || pos > 25*80)
     panic("pos under/overflow");
@@ -159,7 +201,8 @@ cgaputc(int c)
   outb(CRTPORT+1, pos>>8);
   outb(CRTPORT, 15);
   outb(CRTPORT+1, pos);
-  crt[pos] = ' ' | 0x0700;
+
+  if (c != LEFT_ARROW && c != RIGHT_ARROW && flag != 1) crt[pos] = ' ' | 0x0700;
 }
 
 void
@@ -171,60 +214,227 @@ consputc(int c)
       ;
   }
 
-  if(c == BACKSPACE){
-    uartputc('\b'); uartputc(' '); uartputc('\b');
-  } else
-    uartputc(c);
-  cgaputc(c);
+  switch (c) {
+    case BACKSPACE:
+      // uartputc prints to Linux's terminal
+      uartputc('\b'); uartputc(' '); uartputc('\b');  // uart is writing to the linux shell
+      break;
+    case LEFT_ARROW:
+      uartputc('\b');
+      break;
+    case RIGHT_ARROW:
+      if (input.e < input.rightmost) {
+        uartputc(input.buf[input.e % INPUT_BUF]);
+        cgaputc(input.buf[input.e % INPUT_BUF], 1);
+        input.e++;
+      }
+      break;
+    default:
+      uartputc(c);
+  }
+  if (c != RIGHT_ARROW) cgaputc(c, 0);
 }
 
-#define INPUT_BUF 128
-struct {
-  char buf[INPUT_BUF];
-  uint r;  // Read index
-  uint w;  // Write index
-  uint e;  // Edit index
-} input;
 
-#define C(x)  ((x)-'@')  // Control-x
+/*
+Store input.buf into charsToBeMoved (to use later)
+Called when a new key is pressed and the cursor is not at EOL
+*/
+void copyCharsToBeMoved() {
+  for (uint i = 0; i < (uint)(input.rightmost - input.r); i++) {
+    charsToBeMoved[i] = input.buf[(input.e + i) % INPUT_BUF];
+  }
+}
+
+/*
+Shift input.buf (backend) to the right by one unit and print the same on-screen (front-end)
+Called when a new key is pressed and the cursor is not at EOL
+*/
+void rightShiftBuffer() {
+  uint n = input.rightmost - input.e;
+  for (uint i = 0; i < n; i++) {
+    input.buf[(input.e + i) % INPUT_BUF] = charsToBeMoved[i];
+    consputc(charsToBeMoved[i]);
+  }
 
+  // reset charsToBeMoved for further use
+  for(uint i = 0; i < INPUT_BUF; i++) {
+    charsToBeMoved[i] = '\0';
+  }
+  // return the caret to its correct position
+  int i = n;
+  while (i--) {
+    consputc(LEFT_ARROW);    
+  }
+}
+
+/*
+Shift input.buf (backend) to the left by one unit and print the same on-screen (front-end)
+Called when a BACKSPACE is pressed and the cursor is not at EOL
+*/
+void leftShiftBuffer() {
+  /**
+   * For Ex: Input is abcdef and cursor is b/w c and d.
+   * @cursor (display) : @pos in cgaputc
+   */
+  uint n = input.rightmost - input.e;
+  consputc(LEFT_ARROW); // cursor (display) is b/w b and c
+  input.e--; // set the backend part of cursor to the final correct position
+
+  // abcdef -> abdeff
+  for (uint i = 0; i < n; i++) {
+    input.buf[(input.e + i) % INPUT_BUF] = input.buf[(input.e + i + 1) % INPUT_BUF];
+    consputc(input.buf[(input.e + i + 1) % INPUT_BUF]);
+  }
+  // cursor (display) is b/w f and f
+
+  input.rightmost--; // set input.rightmost to the final correct position
+  consputc(' '); // delete the last char in line and advance cursor (display) by 1
+  
+  // set the cursor (display) to the correct position
+  int i = n + 1;
+  while (i--){
+    consputc(LEFT_ARROW); // shift the caret back to the left
+  }
+
+  // at this point, the cursor (display) i.e. pos is in sync with input.e
+}
+
+/*
+  Trigger interupt to handle console
+*/
 void
 consoleintr(int (*getc)(void))
 {
   int c, doprocdump = 0;
-
+  uint tempIndex;
   acquire(&cons.lock);
   while((c = getc()) >= 0){
     switch(c){
-    case C('P'):  // Process listing.
-      // procdump() locks cons.lock indirectly; invoke later
-      doprocdump = 1;
-      break;
-    case C('U'):  // Kill line.
-      while(input.e != input.w &&
-            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
-        input.e--;
-        consputc(BACKSPACE);
-      }
-      break;
-    case C('H'): case '\x7f':  // Backspace
-      if(input.e != input.w){
-        input.e--;
-        consputc(BACKSPACE);
-      }
-      break;
-    default:
-      if(c != 0 && input.e-input.r < INPUT_BUF){
-        c = (c == '\r') ? '\n' : c;
-        input.buf[input.e++ % INPUT_BUF] = c;
-        consputc(c);
-        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
-          input.w = input.e;
-          wakeup(&input.r);
+      case C('P'):  // Process listing.
+        doprocdump = 1;   // procdump() locks cons.lock indirectly; invoke later
+        break;
+      case C('U'):  // Kill line.
+        if (input.rightmost > input.e) { // caret isn't at the end of the line
+          uint numtoshift = input.rightmost - input.e;
+          uint placestoshift = input.e - input.w;
+          uint i;
+          for (i = 0; i < placestoshift; i++) {
+            consputc(LEFT_ARROW);
+          }
+          memset(buf2, '\0', INPUT_BUF);
+          for (i = 0; i < numtoshift; i++) {
+            buf2[i] = input.buf[(input.w + i + placestoshift) % INPUT_BUF];
+          }
+          for (i = 0; i < numtoshift; i++) {
+            input.buf[(input.w + i) % INPUT_BUF] = buf2[i];
+          }
+          input.e -= placestoshift;
+          input.rightmost -= placestoshift;
+          for (i = 0; i < numtoshift; i++) { // repaint the chars
+            consputc(input.buf[(input.e + i) % INPUT_BUF]);
+          }
+          for (i = 0; i < placestoshift; i++) { // erase the leftover chars
+            consputc(' ');
+          }
+          for (i = 0; i < placestoshift + numtoshift; i++) { // move the caret back to the left
+            consputc(LEFT_ARROW);
+          }
+        }
+        else { // caret is at the end of the line -                                       ( deleting everything from both screen and inputbuf)
+          while(input.e != input.w &&
+                input.buf[(input.e - 1) % INPUT_BUF] != '\n'){
+            input.e--;
+            input.rightmost--;
+            consputc(BACKSPACE);
+          }
+        }
+        break;
+      case C('H'): case '\x7f':  // Backspace
+        if (input.rightmost != input.e && input.e != input.w) { // caret isn't at the end of the line
+          leftShiftBuffer();
+          break;
+        }
+        if(input.e != input.w){ // caret is at the end of the line - deleting last char
+          input.e--;
+          input.rightmost--;
+          consputc(BACKSPACE);
+        }
+        break;
+      case LEFT_ARROW:
+        if (input.e != input.w) {
+          input.e--;
+          consputc(c);
+        }
+        break;
+      case RIGHT_ARROW:
+        consputc(RIGHT_ARROW);
+        break;
+      case UP_ARROW:
+       if (historyBufferArray.currentHistory < historyBufferArray.numOfCommmandsInMem-1 ){ // current history means the oldest possible will be MAX_HISTORY-1
+          eraseCurrentLineOnScreen();
+
+          // store the currently entered command (in the terminal) to the oldbuf
+          if (historyBufferArray.currentHistory == -1)
+              copyCharsToBeMovedToOldBuffer();
+              
+          eraseContentOnInputBuffer();
+          historyBufferArray.currentHistory++;
+          tempIndex = (historyBufferArray.lastCommandIndex + historyBufferArray.currentHistory) % MAX_HISTORY;
+          copyBufferToScreen(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
+          copyBufferToInputBuffer(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
+        }
+        break;
+      case DOWN_ARROW:
+        switch(historyBufferArray.currentHistory){
+          case -1:
+            //does nothing
+            break;
+
+          case 0: // get string from old buf
+            eraseCurrentLineOnScreen();
+            copyBufferToInputBuffer(oldBuf, oldBufferLength);
+            copyBufferToScreen(oldBuf, oldBufferLength);
+            historyBufferArray.currentHistory--;
+            break;
+
+          default:
+            eraseCurrentLineOnScreen();
+            historyBufferArray.currentHistory--;
+            tempIndex = (historyBufferArray.lastCommandIndex + historyBufferArray.currentHistory)%MAX_HISTORY;
+            copyBufferToScreen(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
+            copyBufferToInputBuffer(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
+            break;
+        }
+        break;
+      case '\n':
+      case '\r':
+          input.e = input.rightmost;
+      default:
+        if(c != 0 && input.e-input.r < INPUT_BUF){
+          c = (c == '\r') ? '\n' : c;
+          if (input.rightmost > input.e) { // caret isn't at the end of the line
+            copyCharsToBeMoved();
+            input.buf[input.e % INPUT_BUF] = c;
+            input.e++;
+            input.rightmost++;
+            consputc(c);
+            rightShiftBuffer();
+          }
+          else {
+            input.buf[input.e % INPUT_BUF] = c;
+            input.e++;
+            input.rightmost = input.e - input.rightmost == 1 ? input.e : input.rightmost;
+            consputc(c);
+          }
+          if(c == '\n' || c == C('D') || input.rightmost == input.r + INPUT_BUF){
+            saveCommandInHistory();
+            input.w = input.rightmost;
+            wakeup(&input.r);
+          }
         }
+        break;
       }
-      break;
-    }
   }
   release(&cons.lock);
   if(doprocdump) {
@@ -232,6 +442,103 @@ consoleintr(int (*getc)(void))
   }
 }
 
+/*
+  Erase current line from screen
+*/
+void
+eraseCurrentLineOnScreen(void) {
+    int length = input.rightmost - input.r;
+    while (length--) {
+      consputc(BACKSPACE);
+    }
+}
+
+/*
+  Copy input.buf into oldBuf
+*/
+void
+copyCharsToBeMovedToOldBuffer(void) {
+    oldBufferLength = input.rightmost - input.r;
+    for (uint i = 0; i < oldBufferLength; i++) {
+      oldBuf[i] = input.buf[(input.r + i) % INPUT_BUF];
+    }
+}
+
+/*
+  clear input buffer
+*/
+void
+eraseContentOnInputBuffer(){
+  input.rightmost = input.r;
+  input.e = input.r;
+}
+
+/*
+  print bufToPrintOnScreen on-screen
+*/
+void
+copyBufferToScreen(char* bufToPrintOnScreen, uint length){
+  uint i = 0;
+  while(length--) {
+    consputc(bufToPrintOnScreen[i]);
+    i++;
+  }
+}
+
+/*
+  Copy bufToSaveInInput to input.buf
+  Set input.e and input.rightmost
+  assumes input.r == input.w == input.rightmost == input.e
+*/
+void
+copyBufferToInputBuffer(char * bufToSaveInInput, uint length){
+  for (uint i = 0; i < length; i++) {
+    input.buf[(input.r + i) % INPUT_BUF] = bufToSaveInInput[i];
+  }
+
+  input.e = input.r + length;
+  input.rightmost = input.e;
+}
+
+/*
+  Copy current command in input.buf to historyBufferArray (saved history)
+  @param length - length of command to be saved
+*/
+void
+saveCommandInHistory(){
+  uint len = input.rightmost - input.r - 1; // -1 to remove the last '\n' character
+  if (len == 0) return; // to avoid blank commands to store in history
+  
+  historyBufferArray.currentHistory = -1; // reseting the users history current viewed
+
+  if (historyBufferArray.numOfCommmandsInMem < MAX_HISTORY) {
+    historyBufferArray.numOfCommmandsInMem++;
+    // when we get to MAX_HISTORY commands in memory we keep on inserting to the array in a circular manner
+  }
+  historyBufferArray.lastCommandIndex = (historyBufferArray.lastCommandIndex - 1) % MAX_HISTORY;
+  historyBufferArray.lengthsArr[historyBufferArray.lastCommandIndex] = len;
+
+  // do not want to save in memory the last char '/n'
+  for (uint i = 0; i < len; i++) { 
+    historyBufferArray.bufferArr[historyBufferArray.lastCommandIndex][i] =  input.buf[(input.r + i) % INPUT_BUF];
+  }
+}
+
+/*
+  this is the function that gets called by the sys_history and writes the requested command history in the buffer
+*/
+int getCmdFromHistory(char *buffer, int historyId) {
+  // historyId != index of command in historyBufferArray.bufferArr
+  if (historyId < 0 || historyId > MAX_HISTORY - 1)
+    return 2;
+  if (historyId >= historyBufferArray.numOfCommmandsInMem)
+    return 1;
+  memset(buffer, '\0', INPUT_BUF);
+  int tempIndex = (historyBufferArray.lastCommandIndex + historyId) % MAX_HISTORY;
+  memmove(buffer, historyBufferArray.bufferArr[tempIndex], historyBufferArray.lengthsArr[tempIndex]);
+  return 0;
+}
+
 int
 consoleread(struct inode *ip, char *dst, int n)
 {
@@ -295,5 +602,7 @@ consoleinit(void)
   cons.locking = 1;
 
   ioapicenable(IRQ_KBD, 0);
-}
 
+  historyBufferArray.numOfCommmandsInMem=0;
+  historyBufferArray.lastCommandIndex=0;
+}
diff --git a/console.h b/console.h
new file mode 100644
index 0000000..7034903
--- /dev/null
+++ b/console.h
@@ -0,0 +1,58 @@
+//constants used in console.c
+#define UP_ARROW 226
+#define DOWN_ARROW 227
+#define LEFT_ARROW 228
+#define RIGHT_ARROW 229
+
+#define BACKSPACE 0x100
+#define CRTPORT 0x3d4
+
+#define INPUT_BUF 128
+#define MAX_HISTORY 16
+
+#include "types.h"
+
+/*
+  this method eareases the current line from screen
+*/
+void
+eraseCurrentLineOnScreen(void);
+
+/*
+  this method copies the chars currently on display (and on Input.buf) to oldBuf and save its length on current_history_viewed.lengthOld
+*/
+void
+copyCharsToBeMovedToOldBuffer(void);
+
+
+/*
+  this method earase all the content of the current command on the inputbuf
+*/
+void
+eraseContentOnInputBuffer();
+
+/*
+  this method will print the given buf on the screen
+*/
+void
+copyBufferToScreen(char * bufToPrintOnScreen, uint length);
+
+/*
+  this method will copy the given buf to Input.buf
+  will set the input.e and input.rightmost
+  assumes input.r=input.w=input.rightmost=input.e                                                                   
+*/
+void
+copyBufferToInputBuffer(char * bufToSaveInInput, uint length);
+
+/*
+  this method copies the current command in the input.buf to the saved history 
+  @param length - length of command to be saved                                                                                 //GILAD QUES who should call this??
+*/
+void
+saveCommandInHistory();
+
+/*
+  this is the function that gets called by the sys_history and writes the requested command history in the buffer
+*/
+int getCmdFromHistory(char *buffer, int historyId);
\ No newline at end of file
diff --git a/defs.h b/defs.h
index 82fb982..4dd5b1f 100644
--- a/defs.h
+++ b/defs.h
@@ -21,6 +21,7 @@ void            consoleinit(void);
 void            cprintf(char*, ...);
 void            consoleintr(int(*)(void));
 void            panic(char*) __attribute__((noreturn));
+int             getCmdFromHistory(char *, int );
 
 // exec.c
 int             exec(char*, char**);
diff --git a/sh.c b/sh.c
index 054bab9..87b5683 100644
--- a/sh.c
+++ b/sh.c
@@ -3,6 +3,7 @@
 #include "types.h"
 #include "user.h"
 #include "fcntl.h"
+#include "console.h"
 
 // Parsed command representation
 #define EXEC  1
@@ -53,6 +54,25 @@ int fork1(void);  // Fork but panics on failure.
 void panic(char*);
 struct cmd *parsecmd(char*);
 
+char cmdFromHistory[INPUT_BUF]; //this is the buffer that will get the current history command from history
+
+/*
+  this the function the calls to the different history indexes
+*/
+void printHistory() {
+  int i, count = 0;
+  for (i = 0; i < MAX_HISTORY; i++) {
+    // 0 == newest command == historyId (always)
+    if (history(cmdFromHistory, MAX_HISTORY - i - 1) == 0) { // this is the sys call
+      count++;
+      if (count < 10)
+        printf(1, " %d: %s\n", count, cmdFromHistory);
+      else
+        printf(1, "%d: %s\n", count, cmdFromHistory);
+    }
+  }
+}
+
 // Execute cmd.  Never returns.
 void
 runcmd(struct cmd *cmd)
@@ -164,6 +184,11 @@ main(void)
         printf(2, "cannot cd %s\n", buf+3);
       continue;
     }
+    if(buf[0] == 'h' && buf[1] == 'i' && buf[2] == 's' && buf[3] == 't'
+        && buf[4] == 'o' && buf[5] == 'r' && buf[6] == 'y' && buf[7] == '\n') {
+      printHistory();
+      continue;
+    }
     if(fork1() == 0)
       runcmd(parsecmd(buf));
     wait();
diff --git a/syscall.c b/syscall.c
index ee85261..42fe23e 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_history(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +127,7 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_history] sys_history,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..e38a116 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_draw   22
+#define SYS_history  23
diff --git a/sysproc.c b/sysproc.c
index 0686d29..16b7aed 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -89,3 +89,15 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+/*
+  this is the actual function being called from syscall.c
+  @returns - 0 if suceeded, 1 if no history in the historyId given, 2 if illgal history id
+*/
+int sys_history(void) {
+  char *buffer;
+  int historyId;
+  argptr(0, &buffer, 1);
+  argint(1, &historyId);
+  return getCmdFromHistory(buffer, historyId);
+}
diff --git a/user.h b/user.h
index 4f99c52..620ccba 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int history(char*, int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..4e98f1a 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(history)
